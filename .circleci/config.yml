version: 2.1

workflows:
  deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
jobs:
  build:
    docker:
      - image: circleci/node:10
    steps:
      - checkout
      - restore_cache:
          keys:
            - dependency-cache-{{ checksum "yarn.lock" }}
      - run:
          name: Installation via Yarn
          command: yarn
      - save_cache:
          key: dependency-cache-{{ checksum "yarn.lock" }}
          paths:
            - ./node_modules
      - run:
          name: Build the Application
          command: yarn build:production
      - persist_to_workspace:
          root: src
          paths:
            - scripts
            - index.html

  deploy:
    docker:
      - image: circleci/node:10
    steps:
      - checkout
      - run: ls
      - attach_workspace:
          at: /tmp/
      - run: cd /tmp && ls
      # - persist_to_workspace:
      # Must be an absolute path, or relative path from working_directory
      # root: src
      # Must be relative path from root
      # paths:
      # - "*"
      # - checkout
      # - run: echo "job 1"
      # - run: mkdir -p workspace
      # - run: echo "Hello, world!" > workspace/echo-output
      # - run: ls
      # - run: yarn
      # # -
      # - persist_to_workspace:
      #     # Must be an absolute path, or relative path from working_directory
      #     root: workspace
      #     # Must be relative path from root
      #     paths:
      #       - echo-output
  # two:
  # executor: my-executor
  # docker:
  # - image: circleci/node:10
  # steps:
  # - attach_workspace:
  # Must be absolute path or relative path from working_directory
  # at: /tmp/
  # - run: mkdir -p /temp/workspace/my_folder_test_two
  # - run: cd /tmp && ls
# workflows:
#   deploy:
#     jobs:
#       - build
# - two:
#     requires:
#       - one
# build:
#   executor:
#     name: node/default
#   steps:
#     - checkout
#     - node/with-cache:
#         steps:
#           - run: yarn production
# deploy:
#   executor: aws-cli/default
#   steps:
#     - checkout
#     - run: ls
# workflows:
# build-and-deploy:
#   jobs:
#     - build
#     - deploy:
#         requires:
#           - build

### Built-in features

# Circle CI will give you control of a machine's terminal. You'll be able to run terminal commands by yourself. You can use these commands to install what you'll need. But, if you want, you can use pre-configurated steps that will do that for you, like installing Node Js. You can do that inside your Jobs!
# Now, to use node js, without having to install it:

# ```yml
# version: 2.1

# ```yml
# jobs:
#   one:
#     docker:
#       - image: circleci/node:10
# ```
